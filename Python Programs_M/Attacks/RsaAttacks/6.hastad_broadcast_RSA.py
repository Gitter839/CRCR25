from Cryptodome.PublicKey import RSA


def iroot(k, n):
    u, s = n, n+1
    while u < s:
        s = u
        t = (k-1) * s + n // pow(s, k-1)
        u = t // k
    return s

def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)


if __name__ == '__main__':


    n_length = 1024
    e = 5

    rsa1 = RSA.generate(n_length, e=e)
    rsa2 = RSA.generate(n_length, e=e)
    rsa3 = RSA.generate(n_length, e=e)

    n1 = rsa1.n
    n2 = rsa2.n
    n3 = rsa3.n

    print(n1)
    print(n2)
    print(n3)

    print(rsa1.e)

    m = b'This is the message to decrypt'
    m_int = int.from_bytes(m,byteorder='big')

    #Message encypted with 3 different keys (same e different N) -> Broadcast attack, same message different user, different keys same e
    c1 = pow(m_int, e, n1)
    c2 = pow(m_int, e, n2)
    c3 = pow(m_int, e, n3)

    
    C1 = 125363708807577101691189344679176506572649828408511764802565240477127331639726928767037931192035651617508152535805480780938975688036592214381822686438816700984251795742219051754443750511906635212337268172914754823669225677323029362087248170814798222127100240931034778518466301289309026296726395563814389944466
    C2 = 42142006984128215172297479038656824068810454020689766008733861097511791767245269688928877920382199811004676944089793065479779376991574868893028845975607826882129906655173591277319305235361445795773058860635715432482046827292052859148220899422325965374417167345191380273768082186771380160467300061306581091739
    C3 = 43129215977923162644086739091132396312005508702697748883968512100776825327944122427487413563694611784614236606545991068398288980396154372611181353780171073795439133705946394827207983233165142514936680425589325218017598256485706735202514359349275395698105698033774631370470492639323825945160469095999543155424
    C4 = 39400925451733792143981345974859658040985539487231357438129596424078702170583148024921907309757945828821731521725091908971474565133885093868278040841718729358819960496388412293578667904545837564055549912266000715271316207471381107494483648699777344242726914991016332248412255875053332703044832922710012216615
    C5 = 104637749388704245864782047471087822807833716537245702559924052851924055762493433214724492001631272295210876832953858332253798796650624077745777667885717713592588798205441146770778508071447236264112484544504449022700353215540522200031321543647021950399259505799514078012552103790284959748183953249035373498131


    N1 = 137887122568531770052906670751836781371188547817912681827699459229601457856092485235031470842764497111130242984479898854823665959881623318103414349936603413367355821161134641346923895414637259410038068321634553398760005906725246088771693891835733407419032210967175403657580025716770208117204192371608966464447
    N2 = 105252836219877088279783920629631296429625256453989188324764024276723956629396715073767159441094297987331273433730714853878514453630078486669812186661095275795496790728876726148901989276342990912990081974858729137568900383236307989986764785076284378984946803973362735600926082382986514011670365605454226681347
    N3 = 132787857841330100238289752993947860441224468092403454323255935918446110036548128991291738088160824620417154164179474064084341286206545357437207897391880928749662034981714470401555537117436614004058308848249394129111177492297662769258766404908505269161402675594403832043942519278279002265875818985759864244701
    N4 = 145081665301767178995101959526405737199241637489047532346052272790341920057565022838436236205570437540740788547357477772334929462734741144183437687515623283932789534467213567598284888904279168554418564796071563455128224080699075062613936470583736603424526146790050569451677906275964659125655354769214943306333
    N5 = 124871493729695977623308634017933926846168219228047218139482880870804166299161342415504640709771489320577916243928085423563712412630260222956899224595224137077582250455545175173871466969917799678623623089633535422739174113418203955109220595977114353624481215727849805323173671081832051410005770576482578678313

    p1 = (C1, 5, N1)
    p2 = (C2, 5, N2)
    p3 = (C3, 5, N3)
    p4 = (C4, 5, N4)
    p5 = (C5, 5, N5)
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    #Basically from 3 different keys that encrypt the mesage with Bhezos and CRT we can decrypt the message without key
    #but using n1, n2 , n3 ,c1 ,c2, c3

    # CRT states that if n message are encrypted with same e and difenre Ni -> The overall message is encrypted as follow : c = m^e mod (N)
    #Where N is the product of all original Ni -> N= N1 * N2 * N3 (in this case 3 different keys) 3 -> OK 17 -> Diffcult 65537 -> Impossibile
    # N = n1 * n2 * n3
    # c modulo N 
    # c1, c2, c3, n1, n2, n3
    # m_int

    # n1 Find Bezout cofficients
    g, u1, v1 = egcd(N2*N3*N4*N5,N1)  # N / n1
    g, u2, v2 = egcd(N1*N3*N4*N5,N2) #n2
    g, u3, v3 = egcd(N2*N1*N4*N5,N3)  # n2
    g, u4, v4 = egcd(N1*N3*N2*N5,N4) #n2
    g, u5, v5 = egcd(N2*N1*N4*N3,N5)  # n2


    #c = (c1 * u1 * n2*n3 + c2 * u2* n1*n3 + c3 * u3 * n1*n2) % (n1*n2*n3) #There are other solutions to solve this equation, like Sage
    c  = (C1 * u1 * N2*N3*N4*N5
    + C2 * u2 * N1*N3*N4*N5
    + C3 * u3 * N1*N2*N4*N5
    + C4 * u4 * N1*N2*N3*N5
    + C5 * u5 * N1*N2*N3*N4) % (N1*N2*N3*N4*N5)


    dec_int = iroot(e, c)
    print(dec_int.to_bytes(dec_int.bit_length()//8 + 1, byteorder='big').decode())

